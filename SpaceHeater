#!/usr/bin/python3
import threading
import time
import random
import os
import sys
import subprocess
from subprocess import PIPE, Popen
import shlex
from termcolor import colored, cprint

logo = '''
╔═╗┌─┐┌─┐┌─┐┌─┐  ╦ ╦┌─┐┌─┐┌┬┐┌─┐┬─┐
╚═╗├─┘├─┤│  ├┤   ╠═╣├┤ ├─┤ │ ├┤ ├┬┘
╚═╝┴  ┴ ┴└─┘└─┘  ╩ ╩└─┘┴ ┴ ┴ └─┘┴└─
'''

helpText = logo + '''
    
    ---Help---
    
    Example usage 
    
    SpaceHeater --blendFile demo.blend --startFrame 5 --endFrame 10 --device CUDA --device OPENCL --device CPU

    -Required Arguments-
    --blendfile <filename>  : The blender file to render.
                                    The render settings from the file will be used except for start frame, end frame, and render device 
    --startFrame <frame>    : The start of the animation (Inclusive)
    --endFrame <frame>      : The end of the animation (Inclusive)
    --device <device>       : Add device to the list of rendering devices. 
                                    Options: CPU CUDA OPTIX OPENCL
                                    You must configure these devices in blender before you can use them 

    -Optional Arguments-
    --color <true/false>    : Enable colored output
    --help                  : Display this text
    '''

# Default values will be changed in arg parse 
blendFile = "demo.blend"
devices = []
startFrame = 0  
endFrame = 10
numFrames = 11


reservedFrames = []
renderedFrames = []
statuses = []
colorEnabled = True
frameDeviceColor = True

completedTime = 0

startTime = time.time()

# Take a duration in seconds and convert it to a readable format
def formatTime(duration):
    if(duration < 60):
        return str(int(duration)) + "s"

    if(duration < 3600):
        return time.strftime('%M:%S', time.gmtime(int(duration)))

    return time.strftime('%H:%M:%S', time.gmtime(int(duration)))        


# A data class for keeping track of device progress
class deviceStatus:
    # If color is enable this will return the brand color corresponding to the device brand  
    def getColor(self):
        if(colorEnabled):
            if(self.device == "CPU"):
                return "blue"
            if(self.device == "CUDA" or self.device == "OPTIX"):
                return "green"
            if(self.device == "OPENCL"):
                return "red"
        else:
            return "white"
    def getAverageFrameTime(self):
        sum = 0
        for t in self.frameTimes:
            sum += t

        return sum / len(self.frameTimes)
    
    def getTimeRemaining(self):
        return (self.getAverageFrameTime() - (time.time() - self.startTime))

    def __init__(self,device,frame, tilePart, tileWhole, samplePart, sampleWhole):
        self.device = device
        self.frame = frame
        self.tilePart = tilePart
        self.tileWhole = tileWhole
        self.samplePart = samplePart
        self.sampleWhole = sampleWhole
        self.color = self.getColor()
        
        self.startTime = 0 
        self.completedFrames = []
        self.frameTimes = []

        self.done = False    

def isRenderCompleted():
    for status in statuses:
        if(not status.done):
            return False
    return True

# This does not work. I need to figure out how to calculate the time for a parellel process 
def getTimeRemaining():
    # Get the total time to render all current frames
    totalRenderTime = 0
    for status in statuses:
        for time in status.frameTimes:
            totalRenderTime += time

    # Calculate time remaining of not reserved frames
    averageTimePerFrame = totalRenderTime / len(renderedFrames)
    remainingFrames = numFrames - len(renderedFrames)
    timeRemaining = remainingFrames * averageTimePerFrame

    return formatTime(timeRemaining)


# Generate the display text and print it 
def updateDisplay():
    global completedTime
    global renderCompleted

    block = "█"
    partialBlock = "░"
    barLength = 25
   
    # Add the logo
    out = logo + "\n"

    # Check is render is completed
    renderCompleted = isRenderCompleted()
    if(renderCompleted):
        # If this is the first completed loop set the completedTime
        if(completedTime == 0):
            completedTime = time.time() - startTime

    # Display different information based on the render status
    if(not renderCompleted):
        # Render information
        out += f"Rendering {colored(blendFile, attrs=['underline'])}\n"
        out += f"Frames {startFrame}-{endFrame-1}\n\n"
        out += f"Total Time: {formatTime(int(time.time() - startTime))}\n"
    else:
        out += "Done\n"
        out += f"Rendered {colored(blendFile, attrs=['underline'])}\n"
        out += f"Frames {startFrame}-{endFrame-1}\n\n"
        out += f"Total Time: {formatTime(completedTime)}\n"
 

    # Display remaining time estimate if enough frames are completed 
    if(len(renderedFrames) > 2 and not renderCompleted):
        out += f"Remaining: INACCURATE! WILL FIX ~{getTimeRemaining()}\n"

    out+= f"\nCompleted Frames: {len(renderedFrames)}/{numFrames}\n"
    out += "["
    
    # Generate the main progress bar
    for frame in range(startFrame, endFrame):
       if(frame not in reservedFrames):
            out+= " "

       for status in statuses:
            if(frame in status.completedFrames):
                if(frameDeviceColor and colorEnabled):
                    out+= colored(block, status.color)
                else:
                    out+= block
                break
            
            if(status.frame == frame):
                if(frameDeviceColor):
                    out+= colored(partialBlock, status.color)
                else:
                    out+= partialBlock
                break

    out += "]\n\n"
    
    # Generate the device information 
    for status in statuses:
        # Draw the separator
        out += ((barLength+2)*"━") + "\n"
        
        # Draw the device heading
        out += f"{colored(status.device,status.color,attrs=['bold'])}"
        
        # Display different information if the device is done.
        if(status.done):
            out += (" : Done\n")
            out += f"Rendered: {len(status.completedFrames)} frames\n"
        else:
            out += f"\nRendering Frame: {status.frame}\n\n"

            # Draw the time statistics
            out += f"Time: {formatTime(time.time() - status.startTime)}\n"
            if(len(status.frameTimes) > 0):
                out += f"Average: {formatTime(status.getAverageFrameTime())}\n"
                out += f"Remaining: ~{formatTime(status.getTimeRemaining())}\n" 
            out += "\n" 

            # Generate device progress bars if data is available
            if(status.tileWhole != 0): 
                # Generate the tile progress bar
                out += f"Tile: {status.tilePart}/{status.tileWhole}\n["
                numBlocks = int(barLength * (status.tilePart/status.tileWhole))
                out += colored(numBlocks * block, status.color)
                out += (barLength - numBlocks) * " "
                out += "]\n"
            
            if(status.sampleWhole != 0):
                # Generate the sample progress bar
                out += f"Sample: {status.samplePart}/{status.sampleWhole}\n["
                numBlocks = int(barLength * (status.samplePart/status.sampleWhole))
                out += colored(numBlocks * block, status.color)
                out += (barLength - numBlocks) * " "
                out += "]\n"
    
    # Draw the separator
    out += ((barLength+2)*"━") + "\n"
   
    # Clear the screen
    os.system('cls' if os.name == 'nt' else 'clear')
    
    # Display the generated status text
    print(out)

# Parse the output from the blender command
def parseOutput(device, line):
    if("Rendered" in line):
        # Parse Rendered Tiles
        tileRatio = (line[line.index("Rendered") + len("Rendered"):line.index("Tiles")])
        tilePart = int(tileRatio[:tileRatio.index("/")])
        tileWhole = int(tileRatio[tileRatio.index("/") + 1:])
        
        # Parse Frame
        frame = int(line[line.index("Fra:") + len("Fra:"): line.index("Mem")])

        # Parse samples
        samplePart = 0 # Set default values in case they arn't displayed
        sampleWhole = 0
        if("Sample" in line):
            sampleSubStr = line[line.index("Sample"):]
            sampleRatio = ( sampleSubStr[len("Sample"):sampleSubStr.index(",")])
            samplePart = int(sampleRatio[:sampleRatio.index("/")])
            sampleWhole = int(sampleRatio[sampleRatio.index("/") + 1:])

        # Update render status
        for status in statuses:
            if(status.device == device):
                status.frame = frame
                status.tilePart = tilePart
                status.tileWhole = tileWhole
                status.samplePart = samplePart
                if(sampleWhole != 0):
                    status.sampleWhole = sampleWhole
        
        #        #print(line, end="\r")


def render(device):
    global reservedFrames


    # Find the device status associated with the device name and save it to currentDeviceStatus
    currentDeviceStatus = statuses[0]
    for status in statuses:
        if(status.device == device):
           currentDeviceStatus = status 


    # Loop until all frames are rendered or in progress
    while(len(reservedFrames) != numFrames):
        # Get the next available frame and reserve it 
        nextFrame = -1
        for i in range(startFrame, endFrame):
            if(i not in reservedFrames):
                reservedFrames.append(i)
                nextFrame = i
                break 
               
        # Reset the device status 
        currentDeviceStatus.startTime = time.time()
        currentDeviceStatus.tilePart = 0
        currentDeviceStatus.samplePart = 0
        currentDeviceStatus.frame = nextFrame
        
        # Generate the blender command
        cmd = f"blender -b {blendFile} -f {nextFrame} -- --cycles-device {device}"
        
        # Execute the blender command
        p = Popen(cmd, stderr=subprocess.DEVNULL, stdout=PIPE, shell=True)
        
        # Capture and parse the stdout
        while(p.poll() == None):
            line = str(p.stdout.readline())
            if("Rendered" in line):
                parseOutput(device,line) 
       
        # Wait for process to end just in case
        p.wait()

        # Mark the frame as completed
        renderedFrames.append(nextFrame)
        

        # Update the frame startTime and completedFrames
        for status in statuses:
            if(status.device == device):
                status.frameTimes.append(time.time() - status.startTime)
                status.completedFrames.append(nextFrame)
    
    currentDeviceStatus.done = True
    return

def argParse():
    global blendFile
    global startFrame
    global endFrame
    specifiedFile = False
    specifiedStart = False
    specifiedEnd = False
    specifiedDevice = False
    for i in range(len(sys.argv)):
        if(sys.argv[i] == "--blendFile" and i+1 < len(sys.argv)):
            blendFile = sys.argv[i+1]
            specifiedFile = True
        if(sys.argv[i] == "--device" and i+1 < len(sys.argv)):
            devices.append(sys.argv[i+1])
            specifiedDevice = True
        if(sys.argv[i] == "--color" and i+1 < len(sys.argv)):
            color = (argv[i] == "true")
        if(sys.argv[i] == "--startFrame" and i+1 < len(sys.argv)):
            startFrame = int(sys.argv[i+1])
            specifiedStart = True
        if(sys.argv[i] == "--endFrame" and i+1 < len(sys.argv)):
            endFrame = int(sys.argv[i+1])
            specifiedEnd = True
        if(sys.argv[i] == "--help" or sys.argv[i] == "help" or sys.argv[i] == "h"):
            print(helpText)
            exit(0)

    # Check if all required args were specified
    if(not (specifiedFile and specifiedDevice and specifiedStart and specifiedEnd)):
            print("You must specify all required arguments!")
            print(helpText)
            exit(0)

argParse()
endFrame = endFrame + 1
numFrames =  endFrame - startFrame

for device in devices:
    statuses.append(deviceStatus(device, 0,0,0,0,0))
    t = threading.Thread(target=render, args=(device,))
    t.start()

#Update the display every second
while(True):
    updateDisplay()
    time.sleep(1)
